@using Dima.Web.Components
@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="Configuration.Theme" />
<MudSnackbarProvider />
<MudDialogProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
                Dima
                <MudSpacer />
                <MudText Typo="Typo.caption">
                    @context.User.Identity?.Name
                </MudText>
                <MudSwitch Color="Color.Inherit" Class="ma-4" ThumbIcon="@(_isDarkMode ? Icons.TwoTone.LightMode : Icons.TwoTone.DarkMode)" @bind-Value="_isDarkMode" />
            </MudAppBar>
            <MudDrawer @bind-Open="_isDrawerOpened">
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                <MudContainer Class="pa-4">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <LoginRedirect />
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isDarkMode = true;
    private bool _isDrawerOpened = false;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();

        return Task.CompletedTask;
    }

    private void ToggleDrawer() => _isDrawerOpened = !_isDrawerOpened;
}
